edges <- inters[,1:2]
tst <- list(nodes <- nodes,
edges <- edges)
tst$nodes
View(tst)
test[[nodes]]
tst[[nodes]]
tst[nodes]
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
filtered_stat <- mutate(filtered_stat, Fold_change_abs = abs(filtered_stat$Fold_change))
filtered_stat <- filtered_stat[order(filtered_stat$`Fold_change_abs`, decreasing = T), ]
# gene_sym <- UniProt.ws::select(org.Hs.eg.db, filtered_stat[,17], "SYMBOL","UNIPROT")
# gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
# filtered_stat <- filtered_stat %>% mutate(gene_sym)
filtered_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
inters <- string_db$get_interactions(filtered_stat$STRING_id)
inters <- inters[!duplicated(inters),]
nodes <- filtered_stat[1:150, c("Protein_Identifier", "STRING_id")]
# nodes <- drop_na(nodes)
colnames(nodes)  <- c("label", "id")
# nodes$label <- nodes$id
colnames(inters) <- c("from", "to")
edges <- inters[,1:2]
tst <- list(nodes = nodes,
edges = edges)
tst$nodes
runApp('MAP/Prototype_app')
?graph_from_data_frame
edges <- hits$edges
edges <- tst$edges
nodes <- tst$nodes
graph <- graph_from_data_frame(edges, directed = FALSE)
cluster <- cluster_louvain(graph)
cluster_df <- data.frame(as.list(membership(cluster)))
cluster_df <- as.data.frame(t(cluster_df))
cluster_df$id <- rownames(cluster_df)
cluster_df$id <- str_replace(cluster_df$id,"X","")
nodes <- left_join(nodes, cluster_df, by = "id")
colnames(nodes)[3] <- "group"
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
shiny::runApp('MAP/Prototype_app')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(org.Hs.eg.db)
library("clusterProfiler")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
#grabbing statistically significant and differentially expressed proteins
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
#creating a gene list with logFC as values, UNIPROT identifiers as names, and ordering them by logFC (all needed for gseGO())
geneList_HvS <- proStat_HvS[,10]
names(geneList_HvS) = as.character(proStat_HvS[,17])
geneList_HvS = sort(geneList_HvS, decreasing = TRUE)
# GO term classification of genes
ggo <- groupGO(gene     = proStat_HvS$Protein_Identifier,
OrgDb    = org.Hs.eg.db,
keyType = "UNIPROT",
ont      = "CC",
level    = 3,
readable = TRUE)
ggo[order(ggo$GeneRatio, decreasing = T), ]
# GO Gene set enrichment analysis
ego3 <- gseGO(geneList     = geneList_HvS,
OrgDb        = org.Hs.eg.db,
keyType = "UNIPROT",
ont          = "CC",
verbose      = FALSE)
ego3_ordered <- ego3[order(ego3$enrichmentScore), ]
head(ego3_ordered, n=75)
goplot(ego3)
citation("shiny")
citation("visNetwrok")
library(visNetwork)
citation("visNetwrok")
citation("visNetwork")
install.packages("shinydashboard")
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
?sidebarMenu
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
knitr::opts_chunk$set(echo = TRUE)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
# links <- read.csv("string.human.protein.links.txt", sep = " ")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
# links <- read.csv("string.human.protein.links.txt", sep = " ")
colnames(proStat)
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
filtered_stat <- mutate(filtered_stat, Fold_change_abs = abs(filtered_stat$Fold_change))
filtered_stat <- filtered_stat[order(filtered_stat$`Fold_change_abs`, decreasing = T), ]
# gene_sym <- UniProt.ws::select(org.Hs.eg.db, filtered_stat[,17], "SYMBOL","UNIPROT")
# gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
# filtered_stat <- filtered_stat %>% mutate(gene_sym)
filtered_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
inters <- string_db$get_interactions(filtered_stat$STRING_id)
inters <- inters[!duplicated(inters),]
nodes <- filtered_stat[1:150, c("Protein_Identifier", "STRING_id")]
# nodes <- drop_na(nodes)
colnames(nodes)  <- c("label", "id")
# nodes$label <- nodes$id
colnames(inters) <- c("from", "to")
edges <- inters[,1:2]
tst <- list(nodes = nodes,
edges = edges)
View(filtered_stat)
knitr::opts_chunk$set(echo = TRUE)
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
mapped_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
mapped_stat_pval05 <- string_db$add_diff_exp_color( subset(mapped_stat, P_value<0.05), logFcColStr="Fold_change" )
mapped_stat_pval05 <- mutate(mapped_stat_pval05, Fold_change_abs = abs(mapped_stat_pval05$Fold_change))
mapped_stat_pval05 <- mapped_stat_pval05[order(mapped_stat_pval05$`Fold_change_abs`, decreasing = T), ]
payload_id <- string_db$post_payload( mapped_stat_pval05$STRING_id, colors=mapped_stat_pval05$color )
hits <- mapped_stat_pval05[1:150, ]
# png("/Users/lewi052/MAP/network.png", width = 1400, height = 1100)
string_db$plot_network(hits$STRING_id, payload_id = payload_id)
# dev.off()
View(mapped_stat_pval05)
View(mapped_stat)
View(proStat)
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
knitr::opts_chunk$set(echo = TRUE)
library("PCSF")
library("tidyverse")
library("UniProt.ws")
library(org.Hs.eg.db)
data("STRING")
data("Tgfb_phospho")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
names(geneList_HvS) = as.character(gene_sym[,2])
geneList_HvS <- sort(geneList_HvS, decreasing = T)
terminals <- geneList_HvS[1:50]
ppi <- construct_interactome(STRING)
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
class(subnet)
plot(subnet, style = 1, node_size = 20, node_label_cex = 10, Terminal_node_color = "red")
?visIgraph
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
knitr::opts_chunk$set(echo = TRUE)
library("PCSF")
library("tidyverse")
library("UniProt.ws")
library(org.Hs.eg.db)
data("STRING")
data("Tgfb_phospho")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
print(gene_sym)
names(geneList_HvS) = as.character(gene_sym[,2])
runApp('MAP/Prototype_app')
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
names(geneList_HvS) = as.character(gene_sym[,2])
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
names(geneList_HvS) = as.character(gene_sym[,2])
?Uniprot.ws::select
library("UniProt.ws")
?UniProt.ws::select
View(gene_sym)
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
gene_sym[,2] <- replace_na(gene_sym[,2], gene_sym[which(gene_sym[,2]),1])
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
gene_sym[,2] <- replace_na(gene_sym[,2], gene_sym[which(is.na(gene_sym[,2])),1])
runApp('MAP/Prototype_app')
?tabItems
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
?sidebarMenu
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
library(DT)
runApp('MAP/Prototype_app')
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
for (i in length(gene_sym[,2])) {
if (is.na(gene_sym[i,2])) {
gene_sym[i,2] <- gene_sym[i,1]
}
}
# names(geneList_HvS) = as.character(gene_sym[,2])
View(gene_sym)
View(gene_sym)
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
for (i in length(gene_sym[,2])) {
if (is.na(gene_sym[i,2])) {
print("is na")
gene_sym[i,2] <- gene_sym[i,1]
}
}
# names(geneList_HvS) = as.character(gene_sym[,2])
?is.na
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
for (i in length(gene_sym[,2])) {
if (gene_sym[i,2] == NA) {
print("is na")
gene_sym[i,2] <- gene_sym[i,1]
}
}
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
for (i in length(gene_sym[,2])) {
print(i)
if (is.na(gene_sym[i,2])) {
print("is na")
gene_sym[i,2] <- gene_sym[i,1]
}
}
# names(geneList_HvS) = as.character(gene_sym[,2])
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
for (i in 1:length(gene_sym[,2])) {
if (is.na(gene_sym[i,2])) {
print("is na")
gene_sym[i,2] <- gene_sym[i,1]
}
}
# names(geneList_HvS) = as.character(gene_sym[,2])
View(gene_sym)
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
library(pmartR)
library(tidyverse)
library(STRINGdb)
library(stringr)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
colnames(proStat)
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
mapped_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
mapped_stat_pval05 <- string_db$add_diff_exp_color( subset(mapped_stat, P_value<0.05), logFcColStr="Fold_change" )
mapped_stat_pval05 <- mutate(mapped_stat_pval05, Fold_change_abs = abs(mapped_stat_pval05$Fold_change))
mapped_stat_pval05 <- mapped_stat_pval05[order(mapped_stat_pval05$`Fold_change_abs`, decreasing = T), ]
payload_id <- string_db$post_payload( mapped_stat_pval05$STRING_id, colors=mapped_stat_pval05$color )
hits <- mapped_stat_pval05[1:150, ]
# png("/Users/lewi052/MAP/network.png", width = 1400, height = 1100)
string_db$plot_network(hits$STRING_id, payload_id = payload_id)
View(mapped_stat)
# dev.off()
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
mapped_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
mapped_stat_pval05 <- string_db$add_diff_exp_color( subset(mapped_stat, P_value<0.05), logFcColStr="Fold_change" )
mapped_stat_pval05 <- mutate(mapped_stat_pval05, Fold_change_abs = abs(mapped_stat_pval05$Fold_change))
mapped_stat_pval05 <- mapped_stat_pval05[order(mapped_stat_pval05$`Fold_change_abs`, decreasing = T), ]
payload_id <- string_db$post_payload( mapped_stat_pval05$STRING_id, colors=mapped_stat_pval05$color )
hits <- mapped_stat_pval05[1:150, ]
length(unique(hits$Protein_Identifier))
# png("/Users/lewi052/MAP/network.png", width = 1400, height = 1100)
# string_db$plot_network(hits$STRING_id, payload_id = payload_id)
# dev.off()
org.Hs.eg.db
help(org.Hs.eg.db)
columns(org.Hs.eg.db)
org.Hs.eg.db$MAP
columns(org.Hs.eg.db)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
colnames(proStat)
length(proStat
)
length(proStat$Protein)
length(unique(proStat$Protein))
length(proStat$Protein)
length(unique(proStat$Protein))
length(unique(proStat$Protein_Identifier))
length(proStat$Protein)
length(unique(proStat$Protein))
length(unique(proStat$Protein_Identifier))
library("PCSF")
library("tidyverse")
library("UniProt.ws")
library(org.Hs.eg.db)
data("STRING")
data("Tgfb_phospho")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
proStat_HvS <- proStat %>% filter(`P_value_A_Healthy Control_vs_Severe`<0.05) %>% filter(`Flag_A_Healthy Control_vs_Severe` != 0)
geneList_HvS <- abs(proStat_HvS[,10])
gene_sym <- UniProt.ws::select(org.Hs.eg.db, proStat_HvS[,17], "SYMBOL","UNIPROT")
gene_sym <- gene_sym[!duplicated(gene_sym[,1]),]
library(tidyverse)
library(stringr)
library(org.Hs.eg.db)
library("clusterProfiler")
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
library(pmartR)
library(tidyverse)
library(STRINGdb)
library(stringr)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
colnames(proStat)
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, Flag != 0)
mapped_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE )
mapped_stat_pval05 <- string_db$add_diff_exp_color( subset(mapped_stat, P_value<0.05), logFcColStr="Fold_change" )
mapped_stat_pval05 <- mutate(mapped_stat_pval05, Fold_change_abs = abs(mapped_stat_pval05$Fold_change))
mapped_stat_pval05 <- mapped_stat_pval05[order(mapped_stat_pval05$`Fold_change_abs`, decreasing = T), ]
payload_id <- string_db$post_payload( mapped_stat_pval05$STRING_id, colors=mapped_stat_pval05$color )
hits <- mapped_stat_pval05[1:150, ]
length(unique(hits$Protein_Identifier))
# png("/Users/lewi052/MAP/network.png", width = 1400, height = 1100)
# string_db$plot_network(hits$STRING_id, payload_id = payload_id)
# dev.off()
length(unique(mapped_stat$Protein))
length(unique(mapped_stat$Protein_Identifier))
length(unique(filtered_stat$Protein_Identifier))
View(mapped_stat_pval05)
View(mapped_stat)
length(unique(mapped_stat[,1:19]))
length(unique(mapped_stat[,1:2]))
length(mapped_stat[!duplicated(mapped_stat)],)
length(mapped_stat[!duplicated(mapped_stat),])
nrow(mapped_stat[!duplicated(mapped_stat),])
nrow(unique(mapped_stat$Protein_Identifier))
length(unique(mapped_stat$Protein_Identifier))
test <- mapped_stat[duplicated(mapped_stat$Protein_Identifier),]
View(test)
View(filtered_stat)
View(mapped_stat)
View(test)
knitr::opts_chunk$set(echo = TRUE)
library(leapR)
library(org.Hs.eg.db)
library(STRINGdb)
library(tidyverse)
data(protdata)
data(ncipid)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
GO_data <- read_tsv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Biological_Process_2021.txt", col_names = F)
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
string_db <- STRINGdb$new(version="11.5", species=9606, score_threshold=400, input_directory="/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache")
filtered_stat <- filter(proStat, proStat$P_value <= 0.05)
geneSym <- UniProt.ws::select(org.Hs.eg.db, filtered_stat$Protein_Identifier, "SYMBOL","UNIPROT")
geneSym <- geneSym[!duplicated(geneSym[,1]),]
filtered_stat <- mutate(filtered_stat, geneSymbol = geneSym[,2])
mapped_stat <- string_db$map(filtered_stat, "Protein_Identifier", removeUnmappedRows = TRUE)
mapped_stat <- mutate(mapped_stat, Fold_change_abs = abs(mapped_stat$Fold_change))
mapped_stat <- mapped_stat[order(mapped_stat$`Fold_change_abs`, decreasing = T), ]
nodes <- mapped_stat[1:1000, c("geneSymbol", "STRING_id")]
colnames(nodes)  <- c("label", "id")
#Uses stringdb's clusters
clusterList <- string_db$get_clusters(nodes$id)
#Finds the clusters assigned to node by stringdb
clusters <- c()
for (x in nodes$id) {
clusters <- c(clusters, grep(x, clusterList))
}
nodes$group <- clusters
#Cannot have duplicated ids
nodes <- nodes[!duplicated(nodes$id),]
nodes <- nodes[order(nodes$group), ]
#If there's only one member of the cluster, it's relabeled as "No Cluster"
for (y in nodes$group){
if (sum(nodes$group==y) == 1){
nodes$group[which(nodes$group == y)] <- "No Cluster"
}
}
GO_header <- read_tsv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Headers_2021.txt", col_names = F)
GO_data <- read.csv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_data_2021.txt", header = F, sep = "\t")
lens <- c()
for (i in 1:nrow(GO_data)) {
lens <- c(lens, length(which(!is.na(GO_data[i,]))))
}
length(lens)
GO_list <- list(names = as.matrix(GO_header),
desc = as.matrix(GO_header),
size = lens,
data = as.matrix(GO_data[, 3:length(GO_data)]))
clust1enrich = leapR(geneset=ncipid, enrichment_method="enrichment_in_sets",
background=nodes$label,
targets=nodes$label[which(nodes$group==1)])
View(clust1enrich)
shiny::runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
runApp('MAP/Prototype_app')
View(clust1enrich)
View(clust1enrich)
View(GO_header)
View(GO_data)
GO_data <- read_tsv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Biological_Process_2021.txt", col_names = F)
View(GO_data)
?leapR:::read_gene_cluster_text
?leapR::read_gene_sets
runApp('MAP/Prototype_app')
GO_header <- read_tsv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Headers_2021.txt", col_names = F)
GO_data <- read.csv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_data_2021.txt", header = F, sep = "\t")
lens <- c()
for (i in 1:nrow(GO_data)) {
lens <- c(lens, length(which(!is.na(GO_data[i,]))))
}
length(lens)
GO_list <- list(names = as.matrix(GO_header),
desc = as.matrix(GO_header),
size = lens,
data = as.matrix(GO_data[, 3:length(GO_data)]))
read_gene_sets("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Biological_Process_2021.txt")
GO_data <- read_gene_sets("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/GO_Biological_Process_2021.txt")
clust1enrich = leapR(geneset=GO_data, enrichment_method="enrichment_in_sets",
background=nodes$label,
targets=nodes$label[which(nodes$group==1)])
View(clust1enrich)
source("~/MAP/Prototype_app/enrichment.R")
setwd("/Users/lewi052/MAP")
source("~/MAP/Prototype_app/enrichment.R")
setwd("/Users/lewi052/MAP/Prototype_app/")
source("~/MAP/Prototype_app/enrichment.R")
enrichment_analysis()
enrichment_analysis
leapR:::call_enr
?leapR:::call_enr
??leapR:::call_enr
PCSF:::call_enr
runApp()
runApp()
runApp()
View(clust1enrich)
View(clust1enrich)
