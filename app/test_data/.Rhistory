proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- unlist(names)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
convert_to_hugo <- function(hits){
names <- c()
for (i in hits){
n1 <- mapping_db[which(mapping_db$`#string_protein_id` == i & mapping_db$source == "BioMart_HUGO"), 2]
print(n1)
names <- c(names, n1)
}
return(as.vector(names))
}
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- unlist(names)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
inters_db <- read.table("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/9606.protein.links.v11.5.txt.gz", header = T)
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- unlist(names)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
class(inters_db)
mapping_db <- read.csv("/Users/lewi052/MAP/STRINGdb_exploration/STRINGdb_cache/9606.protein.aliases.v11.5.txt.gz", sep = "\t")
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- unlist(names)
View(mapping_db)
colnames(mapping_db)
convert_to_hugo <- function(hits){
names <- c()
for (i in hits){
n1 <- mapping_db[which(mapping_db$X.string_protein_id == i & mapping_db$source == "BioMart_HUGO"), 2]
print(n1)
names <- c(names, n1)
}
return(as.vector(names))
}
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- unlist(names)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
print(names)
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(V(subnet)$name)
V(subnet)$name <- convert_to_hugo(V(subnet)$name)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
names[which(is.null(names))]
names[!which(is.null(names))]
names[which(!is.null(names))]
naems
names
is.null(names)
which(is.null(names))
which(names == "EIF3L)
which(names == "EIF3L")
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(unlist(V(subnet)$name))
V(subnet)$name <- convert_to_hugo(V(subnet)$name)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
View(subnet)
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
View(subnet)
names <- convert_to_hugo(unlist(V(subnet)$name))
names <- convert_to_hugo(unlist(V(subnet)$name))
names[144] <- "MTU"
V(subnet)$name <- names
View(subnet)
visIgraph(subnet) %>% visIgraphLayout()
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(unlist(V(subnet)$name))
V(subnet)$name <- convert_to_hugo(V(subnet)$name)
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
print(names)
convert_to_hugo <- function(hits){
names <- c()
for (i in hits){
n1 <- mapping_db[which(mapping_db$X.string_protein_id == i & mapping_db$source == "BioMart_HUGO"), 2]
if(length(n1) == 1){
names <- c(names, n1)
} else{
names <- i
}
}
return(as.vector(names))
}
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
V(subnet)$name <- convert_to_hugo(unlist(V(subnet)$name))
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(unlist(V(subnet)$name))
V(subnet)$name <- names
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
names
convert_to_hugo <- function(hits){
names <- c()
for (i in hits){
n1 <- mapping_db[which(mapping_db$X.string_protein_id == i & mapping_db$source == "BioMart_HUGO"), 2]
if(length(n1) == 1){
names <- c(names, n1)
} else{
names <- c(names, i)
}
}
return(as.vector(names))
}
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
proStat <- mutate(proStat, Fold_change_abs = abs(proStat$Fold_change))
proStat <- proStat[order(proStat$`Fold_change_abs`, decreasing = T), ]
terminals <- proStat$Fold_change_abs[1:150]
hits <- proStat[1:150, ]
hits <- map_to_stringids(hits)
names(terminals) = as.character(hits$STRING_id)
ppi <- prepare_interactome()
subnet <- PCSF(ppi, terminals, w = 2, b = 1, mu = 0.0005)
names <- convert_to_hugo(unlist(V(subnet)$name))
V(subnet)$name <- names
class(subnet)
visIgraph(subnet) %>% visIgraphLayout()
runApp('MAP/Prototype_app')
View(prepare_interactome)
View(subnet)
View(inters_db)
install.packages("usethis")
browseVignettes(usethis)
browseVignettes("usethis")
library(usethis)
?use_package
?use_git
?use_git_remote
shiny::runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
knitr::opts_chunk$set(echo = TRUE)
proData <- readRDS("/Users/lewi052/enrich_proj/MAP/STRINGdb_exploration/proStat2.RDS")
proData <- readRDS("/Users/lewi052/enrich_proj/MAP/STRINGdb_exploration/proStat2.RDS")
View(proData)
colnames(proData)
proData[,c('Protein_Identifier','Fold_change_Healthy Control_vs_Severe')]
outFile <- proData[,c('Protein_Identifier','Fold_change_Healthy Control_vs_Severe')]
colnames(outFile) <- c('Protein_Identifier', 'Fold_Change')
saveRDS(outFile, "testData.RDS")
getwd()
?write_tsv
save_tsv(outFile, "testData.tsv")
write_tsv(outFile, "testData.tsv")
knitr::opts_chunk$set(echo = TRUE)
proData <- readRDS("/Users/lewi052/enrich_proj/MAP/STRINGdb_exploration/proStat2.RDS")
outFile <- proData[,c('Protein_Identifier','Fold_change_Healthy Control_vs_Severe')]
colnames(outFile) <- c('name', 'prize')
write_tsv(outFile, "testData.tsv")
inters_file <- read.table("STRING_db/9606.protein.links.v11.5.txt.gz")
inters_file <- read.table("/Users/lewi052/enrich_proj/MAP/Prototype_app/STRING_db/9606.protein.links.v11.5.txt.gz")
View(inters_file)
inters_file <- read.table("/Users/lewi052/enrich_proj/MAP/Prototype_app/STRING_db/9606.protein.links.v11.5.txt.gz", header = T)
colnames(inters_file) <- ("protein1", "protein2", "cost")
colnames(inters_file) <- c("protein1", "protein2", "cost")
View(inters_file)
getwd()
colnames(inters_file) <- c("protein1", "protein2", "cost")
write_tsv(inters_file, "testEdges.tsv")
colnames(inters_file) <- c("protein1", "protein2", "cost")
inters_file$cost <- (1000 - inters_file$cost)/1000
write_tsv(inters_file, "/Users/lewi052/enrich_proj/spras/docker-wrappers/OmicsIntegrator2/testEdges.tsv")
outFile <- proData[,c('Protein_Identifier','Fold_change_Healthy Control_vs_Severe')]
colnames(outFile) <- c('name', 'prize')
outFile$prize <- abs(outFile$prize)
write_tsv(outFile, "/Users/lewi052/enrich_proj/spras/docker-wrappers/OmicsIntegrator2/testData.tsv")
knitr::opts_chunk$set(echo = TRUE)
outData <- read.table("/Users/lewi052/enrich_proj/spras/output2/data0-omicsintegrator2-params-IV3IPCJ/pathway.txt")
graph <- graph_from_data_frame(outData)
library(igraph)
library(visNetwork)
graph <- graph_from_data_frame(outData)
visIgraph(graph)
?system
shiny::runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
View(edit_e_table)
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
runApp('enrich_proj/MAP/Prototype_app')
shiny::runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess")
knitr::opts_chunk$set(echo = TRUE)
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess", auth_token=[insert_your_gitlab_auth_token])
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess")
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess", auth_token=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)
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess", auth_token="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")
remotes::install_gitlab("https://code.emsl.pnl.gov/multiomics-analyses/mapdataaccess-lib",
subdir="mapDataAccess", auth_token="mVysmakbcK7A7dgfFxWG")
install.packages("/Users/lewi052/Desktop/mapdataaccess-lib", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE)
Sys.setenv(
MAP_DATA_SOURCE="minio",
MINIO_ENDPOINT="localhost:9000",
MINIO_ACCESS_KEY="minioadmin",
MINIO_SECRET_KEY="minioadmin",
MINIO_BUCKET="map",
MINIO_SECURE="FALSE",
MAP_DATA_ACCESS_VERBOSE="TRUE",
MAP_PYTHON_VENV="/Users/lewi052/Desktop/mapdataaccess-lib/venv")
con <- map_data_connection()
library(mapDataAccess)
con <- map_data_connection()
con <- map_data_connection()
id <- put_data(con, iris)
iris2 <- get_data(con, id)
remove_data(con, id)
t <- list(key1="value1", key2="value2")
set_tags(con, id, tags)
t <- list(key1="value1", key2="value2")
set_tags(con, id, t)
?set_tags
t <- list(key1="value1", key2="value2")
set_tags(con, id, t)
t2 <- get_tags(con, id)
id <- put_data(con, iris)
t <- list(key1="value1", key2="value2")
set_tags(con, id, t)
t2 <- get_tags(con, id)
t3 <- get_tags(con, id)
t3[["key3"]] <- "value3"
set_tags(con, id, t3)
View(t3)
remove_tags(con, id)
Sys.setenv("DEMO_VERSION" = "1")
"DEMO_VERSION" == "1"
DEMO_VERSION == "1"
Sys.DEMO_VERSION == "1"
Sys.getenv("DEMO_VERSION")
Sys.getenv("DEMO_VERSION") == "1"
Sys.getenv("DEMO_VERSION")
shiny::runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
read_table(/Users/lewi052/Downloads/pro_midpoint_stats)
read_table("/Users/lewi052/Downloads/pro_midpoint_stats")
read_data("/Users/lewi052/Downloads/pro_midpoint_stats")
read.data("/Users/lewi052/Downloads/pro_midpoint_stats")
read_rds("/Users/lewi052/Downloads/pro_midpoint_stats")
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
devtools::install_github("EMSL-Computing/mapDataAccess")
getwd()
runApp('enrich_proj/ShinyAppPortal/Portal-App')
runApp('enrich_proj/ShinyAppPortal/FilterData-App')
runApp('enrich_proj/ShinyAppPortal/FilterData-App')
?textInput
runApp('enrich_proj/ShinyAppPortal/FilterData-App')
?reactiveValues
shiny::runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
Sys.getenv("DEMO_VERSION") == "0"
Sys.getenv("DEMO_VERSION") = "0"
Sys.setenv("DEMO_VERSION" = "0")
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
runApp('enrich_proj/NEATO/Prototype_app')
?selectInput
library(shiny)
?selectInput
runApp('enrich_proj/NEATO/Prototype_app')
?bsCollapsePanel
pmartRdata::isobaric_edata
test <- pmartRdata::pro_edata_edata
test <- pmartRdata::pro_edata
View(test)
View(test)
library(rwarker)
RUN Rscript -e "devtools::install_github('amwhite/rworker', repos = 'https://cran.rstudio.com')"
devtools::install_github('amwhite/rworker', repos = 'https://cran.rstudio.com')
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pep_object)
pep_object <- edata_replace(pep_object, 0, NA)
pep_object <- edata_transform(pep_object, "log2")
# create some fake sample information to use in examples #
pep_object$f_data$Condition2 <- c("A","A","A","B","B","B","C","C","C","D","D","D")
pep_object$f_data$Condition3 <- c(rep("Plus",6), rep("Minus",6))
pep_object <- group_designation(omicsData = pep_object, main_effects = c("Condition"))
myfilt <- imdanova_filter(omicsData = pep_object)
pep_object <- applyFilt(filter_object = myfilt, omicsData = pep_object, min_nonmiss_anova = 2, min_nonmiss_gtest = 3)
all_pairwise_results <- anova_test(omicsData = pep_object)
?anova_test
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pep_object)
pep_object <- edata_replace(pep_object, 0, NA)
pep_object <- edata_transform(pep_object, "log2")
# create some fake sample information to use in examples #
pep_object$f_data$Condition2 <- c("A","A","A","B","B","B","C","C","C","D","D","D")
pep_object$f_data$Condition3 <- c(rep("Plus",6), rep("Minus",6))
pep_object <- group_designation(omicsData = pep_object, main_effects = c("Condition"))
myfilt <- imdanova_filter(omicsData = pep_object)
pep_object <- applyFilt(filter_object = myfilt, omicsData = pep_object, min_nonmiss_anova = 2, min_nonmiss_gtest = 3)
all_pairwise_results <- anova_test(omicsData = pep_object)
all_pairwise_results_adjusted <- anova_test(omicsData = pep_object, pval_adjust = "Tukey")
?anova_test
stat_results <- imd_anova(omicsData = pep_object, test_method = "combined")
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pep_object)
pep_object <- edata_replace(pep_object, 0, NA)
pep_object <- edata_transform(pep_object, "log2")
# create some fake sample information to use in examples #
pep_object$f_data$Condition2 <- c("A","A","A","B","B","B","C","C","C","D","D","D")
pep_object$f_data$Condition3 <- c(rep("Plus",6), rep("Minus",6))
stat_results <- imd_anova(omicsData = pep_object, test_method = "combined")
pep_object <- group_designation(omicsData = pep_object, main_effects = c("Condition"))
stat_results <- imd_anova(omicsData = pep_object, test_method = "combined")
myfilt <- imdanova_filter(omicsData = pep_object)
pep_object <- applyFilt(filter_object = myfilt, omicsData = pep_object, min_nonmiss_anova = 2, min_nonmiss_gtest = 3)
stat_results <- imd_anova(omicsData = pep_object, test_method = "combined")
setwd("~/enrich_proj/NEATO/app/test_data/")
saveRDS(stat_results, "stat_res.RDS")
View(stat_results)
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pro_object)
pro_object <- edata_replace(pro_object, 0, NA)
pro_object <- edata_transform(pro_object, "log2")
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pro_object)
pro_object <- edata_replace(pro_object, 0, NA)
# pro_object <- edata_transform(pro_object, "log2")
# create some fake sample information to use in examples #
pro_object$f_data$Condition2 <- c("A","A","A","B","B","B","C","C","C","D","D","D")
library(pmartR)
library(pmartRdata)
rm(list = ls())
data(pro_object)
pro_object <- edata_replace(pro_object, 0, NA)
# pro_object <- edata_transform(pro_object, "log2")
# create some fake sample information to use in examples #
pro_object$f_data$Condition2 <- c("A","A","A","B","B","B","C","C","C","D","D")
pro_object$f_data$Condition3 <- c(rep("Plus",6), rep("Minus",5))
stat_results <- imd_anova(omicsData = pro_object, test_method = "combined")
pro_object <- group_designation(omicsData = pro_object, main_effects = c("Condition"))
myfilt <- imdanova_filter(omicsData = pro_object)
pro_object <- applyFilt(filter_object = myfilt, omicsData = pro_object, min_nonmiss_anova = 2, min_nonmiss_gtest = 3)
stat_results <- imd_anova(omicsData = pro_object, test_method = "combined")
View(stat_results)
library(stringr)
stat_results$Protiens <- str_split(stat_results$Reference, "_")[1]
stat_results$Protiens <- str_split(stat_results$Reference, "_")[1][1]
list_words <- str_split(stat_results$Reference, "_")
View(list_words)
prot_lists <- c()
for(i in list_words) {
prot_lists <- c(prot_lists, i[1])
}
stat_results$Protiens <- prot_list
prot_list <- c()
for(i in list_words) {
prot_list <- c(prot_list, i[1])
}
stat_results$Protiens <- prot_list
View(stat_results)
prot_list <- c()
for(i in list_words) {
prot_list <- c(prot_list, i[1])
}
stat_results$Protiens <- prot_list
saveRDS(stat_results, "stat_res.RDS")
prot_list <- c()
for(i in list_words) {
prot_list <- c(prot_list, i[1])
}
stat_results$Protiens <- prot_list
saveRDS(stat_results, "stat_res.RDS")
prot_list <- c()
for(i in list_words) {
prot_list <- c(prot_list, i[1])
}
stat_results$Protiens <- prot_list
stat_results <- drop_na(stat_results)
saveRDS(stat_results, "stat_res.RDS")
?checkboxInput
