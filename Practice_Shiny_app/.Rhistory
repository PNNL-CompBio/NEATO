data("pro_fdata")
dim(pro_fdata)
head(pro_fdata)
myproData <- as.proData(e_data = pro_edata, f_data = pro_fdata, e_meta = pro_emeta, edata_cname = "Reference", fdata_cname = "SampleID", data_scale = "abundance")
myproData <- as.proData(e_data = pro_edata, f_data = pro_fdata, edata_cname = "Reference", fdata_cname = "SampleID", data_scale = "abundance")
class(mypepData)
summary(mypepData)
myproData <- as.proData(e_data = pro_edata, f_data = pro_fdata, edata_cname = "Reference", fdata_cname = "SampleID", data_scale = "abundance")
class(myproData)
summary(myproData)
plot(myproData)
knitr::opts_chunk$set(echo = TRUE)
library(pmartR)
library(pmartRdata)
library(tidyverse)
library(reshape2)
data("pro_edata")
dim(pro_edata)
pro_edata[1:6,1:5]
data("pro_fdata")
dim(pro_fdata)
head(pro_fdata)
myproData <- as.proData(e_data = pro_edata, f_data = pro_fdata, edata_cname = "Reference", fdata_cname = "SampleID", data_scale = "abundance")
class(myproData)
summary(myproData)
plot(myproData)
myproData <- edata_transform(myproData, data_scale = "log2")
attributes(myproData)$data_info$data_scale
plot(myproData)
myproData <- group_designation(myproData, main_effects = "Condition", covariates = NULL)
attributes(myproData)$group_DF
plot(myproData, color_by = "Condition", bw_theme=TRUE)
knitr::include_graphics("pmartR_graphic-final.jpg")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
knitr::opts_chunk$set(echo = TRUE)
proStat <- readRDS("proStat.RDS")
proStat <- readRDS("/Users/lewi052/MAP/proStat.RDS")
View(proStat)
View(proStat)
proStat2 <- read.csv("/Users/lewi052/MAP/proStat.csv")
View(proStat2)
View(proStat)
View(proStat)
browseVignettes("STRINGdb")
library(pmartR)
library(pmartRdata)
library(tidyverse)
library(reshape2)
library(STRINGdb)
?STRINGdb
plot(proStat)
attributes(proStat)$data_info$data_scale
attributes(proStat)
attributes(proStat)$group_DF
attributes(myproData)$group_DF
attributes(proStat)$group_DF
plot(myproData, color_by = "Condition", bw_theme=TRUE)
myproData <- group_designation(myproData, main_effects = "Condition", covariates = NULL)
attributes(proStat)$group_DF
attributes(myproData)$group_DF
plot(myproData, color_by = "StatusCondition", bw_theme=TRUE)
plot(proStat, color_by = "StatusCondition", bw_theme=TRUE)
myproData <- group_designation(myproData, main_effects = "Condition", covariates = NULL)
attributes(proStat)$group_DF
attributes(myproData)$group_DF
plot(proStat, color_by = "StatusGroup", bw_theme=TRUE)
attributes(proStat)$group_DF
attributes(myproData)$group_DF
View(proStat)
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=200, input_directory="")
View(proStat)
example1_mapped <- string_db$map(proStat, "Protein", removeUnmappedRows = TRUE )
words <- c("These are   some words.")
str_split(words, boundary("word"))[[1]]
str_split(words, boundary("word"))[[1]][2]
str_split(words, boundary("word"))[[1]][3]
str_split(sp|O15144|ARPC2_HUMAN, "|")[[1]][2]
str_split(sp|O15144|ARPC2_HUMAN, "|")[[1]][2]
str_split("sp|O15144|ARPC2_HUMAN", "|")[[1]][2]
str_split("sp|O15144|ARPC2_HUMAN", "|")[[1]][2]
str_split("sp|O15144|ARPC2_HUMAN", "\|")[[1]][2]
str_split("sp|O15144|ARPC2_HUMAN", "|")[[1]]
str_split("sp|O15144|ARPC2_HUMAN", "|")
str_split("sp|O15144|ARPC2_HUMAN", "\\W")
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2
]
?mutate
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
str_split(proStat$Protein, "\\W")[[1]][2] -> Protein_Identifier
mutate(proStat, ProProtein_Identifier <- Protein_Identifier)
proStat2 <- mutate(proStat, ProProtein_Identifier <- Protein_Identifier)
View(proStat2)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
for(i in nrows(proStat)){
str_split(proStat$Protein, "\\W")[[i]][2] -> Protein_Identifier
}
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
for(i in nrow(proStat)){
str_split(proStat$Protein, "\\W")[[i]][2] -> Protein_Identifier
}
proStat2 <- mutate(proStat, ProProtein_Identifier <- Protein_Identifier)
View(proStat2)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2]))
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, ProProtein_Identifier <- Protein_Identifier)
Protein_Identifier <- c()
for(i in nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
str_split(proStat$Protein, "\\W")[[i]][2])
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
str_split(proStat$Protein, "\\W")[[i]][2]
Protein_Identifier
}
proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[1]][2])
str_split(proStat$Protein, "\\W")[[1]][2]
Protein_Identifier
}
proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[1]][2])
str_split(proStat$Protein, "\\W")[[1]][2]
Protein_Identifier
}#proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[1]][2])
print(str_split(proStat$Protein, "\\W")[[1]][2])
print(Protein_Identifier)
}
#proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(str_split(proStat$Protein, "\\W")[[i]][2])
print(Protein_Identifier)
}
#proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- str_split(proStat$Protein, "\\W")[[i]][2]
print(Protein_Identifier)
}
proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- str_split(proStat$Protein, "\\W")[[i]][2]
print(str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(str_split(Protein_Identifier)
}
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:100){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(Protein_Identifier)
}
# proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(Protein_Identifier)
}
# proStat2 <- mutate(proStat, Protein_Identifier)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(Protein_Identifier)
}
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
print(Protein_Identifier)
}
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
example1_mapped <- string_db$map(proStat, "Protein_Interaction", removeUnmappedRows = TRUE )
example1_mapped <- string_db$map(proStat2, "Protein_Interaction", removeUnmappedRows = TRUE )
example1_mapped <- string_db$map(proStat2, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
hits <- example1_mapped$STRING_id[1:20]
string_db$plot_network(hits)
knitr::opts_chunk$set(echo = TRUE)
library(pmartR)
library(pmartRdata)
library(tidyverse)
library(reshape2)
library(STRINGdb)
library(stringr)
proStat <- readRDS("/Users/lewi052/MAP/proStat.RDS")
library(pmartR)
library(tidyverse)
library(reshape2)
library(STRINGdb)
library(stringr)
library(pmartR)
library(tidyverse)
library(STRINGdb)
library(stringr)
attributes(proStat)$group_DF
plot(proStat, color_by = "StatusGroup", bw_theme=TRUE)
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=200, input_directory="")
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=200, input_directory="")
example1_mapped <- string_db$map(proStat2, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
enrichment <- string_db$get_enrichment( hits )
head(enrichment, n=20)
View(enrichment)
annotations <- string_db$get_annotations( hits )
head(annotations, n=20)
View(annotations)
clustersList <- string_db$get_clusters(example1_mapped$STRING_id[1:600])
clustersList <- string_db$get_clusters(example1_mapped$STRING_id[1:600])
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
clustersList <- string_db$get_clusters(example1_mapped$STRING_id[1:600])
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
View(example1_mapped)
plot(proStat)
?filer
?filter
colnames(proStat2)
Up_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "1")
Up_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "1")
Up_HvM <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "1")
Up_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "1")
Down_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "-1")
Down_HvM <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "-1")
Down_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "-1")
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
Up_HvS <- Up_HvS[order(`P_value_A_Healthy Control_vs_Severe`), ]
Up_HvS <- Up_HvS[order(Up_HvS$`P_value_A_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
enrichment <- string_db$get_enrichment( hits )
head(enrichment, n=20)
annotations <- string_db$get_annotations( hits )
head(annotations, n=20)
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
Flag_A_Mild_vs_Healthy Control
colnames(proStats)
colnames(proStats2)
colnames(proStat2)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
proStat2 <- filter(proStat2, `P_value_A_Mild_vs_Healthy Control` < 0.05 | `P_value_A_Mild_vs_Severe` > 0.05 | `P_value_A_Healthy Control_vs_Severe` > 0.05)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
proStat2 <- filter(proStat2, `P_value_A_Mild_vs_Healthy Control` < 0.05 | `P_value_A_Mild_vs_Severe` < 0.05 | `P_value_A_Healthy Control_vs_Severe` < 0.05)
Up_HvS <- filter(Up_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
Up_HvS <- Up_HvS[order(Up_HvS$`P_value_A_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, bins = 20)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Up_HvS <- filter(Up_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Up_HvS <- filter(Up_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Up_HvS <- Up_HvS[order(Up_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
Up_HvS <- filter(Up_HvS, `Fold_change_Healthy Control_vs_Severe` > 0.15)
Up_HvS <- Up_HvS[order(Up_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
Up_HvS <- filter(Up_HvS, `Fold_change_Healthy Control_vs_Severe` > 0.15)
Up_HvS <- Up_HvS[order(Up_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network(hits)
hits <- example1_mapped$STRING_id
string_db$plot_network(hits)
knitr::opts_chunk$set(echo = TRUE)
library(pmartR)
library(tidyverse)
library(STRINGdb)
library(stringr)
proStat <- readRDS("/Users/lewi052/MAP/proStat.RDS")
attributes(proStat)
plot(proStat)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
Up_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "1")
Up_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "1")
Up_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "1")
Down_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "-1")
Down_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "-1")
Down_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "-1")
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=400, input_directory="")
Up_HvS <- filter(Up_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Up_HvS <- filter(Up_HvS, `Fold_change_Healthy Control_vs_Severe` > 0.15)
Up_HvS <- Up_HvS[order(Up_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id
string_db$plot_network(hits)
enrichment <- string_db$get_enrichment( hits )
head(enrichment, n=20)
annotations <- string_db$get_annotations( hits )
head(annotations, n=20)
clustersList <- string_db$get_clusters(example1_mapped$STRING_id[1:600])
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
Down_HvS <- filter(Down_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Down_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Down_HvS <- filter(Down_HvS, `Fold_change_Healthy Control_vs_Severe` > -0.65)
Down_HvS <- Down_HvS[order(Down_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example2_mapped <- string_db$map(Down_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example2_mapped$STRING_id
string_db$plot_network(hits)
Down_HvS <- filter(Down_HvS, `Fold_change_Healthy Control_vs_Severe` < -0.65)
Down_HvS <- Down_HvS[order(Down_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example2_mapped <- string_db$map(Down_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example2_mapped$STRING_id
string_db$plot_network(hits)
hits <- example2_mapped$STRING_id
string_db$plot_network(hits)
View(example2_mapped)
Down_HvS <- filter(Down_HvS, `Fold_change_Healthy Control_vs_Severe` < -0.65)
Down_HvS <- Down_HvS[order(Down_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example2_mapped <- string_db$map(Down_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
Up_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "1")
Up_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "1")
Up_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "1")
Down_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "-1")
Down_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "-1")
Down_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "-1")
Down_HvS <- filter(Down_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Down_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Down_HvS <- filter(Down_HvS, `Fold_change_Healthy Control_vs_Severe` < -0.65)
Down_HvS <- Down_HvS[order(Down_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example2_mapped <- string_db$map(Down_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example2_mapped$STRING_id
string_db$plot_network(hits)
clustersList <- string_db$get_clusters(example1_mapped$STRING_id)
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
enrichment <- string_db$get_enrichment( hits )
head(enrichment, n=20)
annotations <- string_db$get_annotations( hits )
head(annotations, n=20)
knitr::opts_chunk$set(echo = TRUE)
library(pmartR)
library(tidyverse)
library(STRINGdb)
library(stringr)
proStat <- readRDS("/Users/lewi052/MAP/proStat.RDS")
attributes(proStat)
plot(proStat)
str_split("sp|O15144|ARPC2_HUMAN", "\\W")[[1]][2]
Protein_Identifier <- c()
for(i in 1:nrow(proStat)){
Protein_Identifier <- c(Protein_Identifier, str_split(proStat$Protein, "\\W")[[i]][2])
}
proStat2 <- mutate(proStat, Protein_Identifier)
Up_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "1")
Up_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "1")
Up_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "1")
Down_HvS <- filter(proStat2, `Flag_A_Healthy Control_vs_Severe` == "-1")
Down_MvH <- filter(proStat2, `Flag_A_Mild_vs_Healthy Control` == "-1")
Down_MvS <- filter(proStat2, `Flag_A_Mild_vs_Severe` == "-1")
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=400, input_directory="")
Up_HvS <- filter(Up_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Up_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Up_HvS <- filter(Up_HvS, `Fold_change_Healthy Control_vs_Severe` > 0.15)
Up_HvS <- Up_HvS[order(Up_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example1_mapped <- string_db$map(Up_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id
string_db$plot_network(hits)
enrichment <- string_db$get_enrichment( hits )
head(enrichment, n=20)
annotations <- string_db$get_annotations( hits )
head(annotations, n=20)
clustersList <- string_db$get_clusters(example1_mapped$STRING_id[1:600])
par(mfrow=c(2,2))
for(i in seq(1:4)){
string_db$plot_network(clustersList[[i]])
}
Down_HvS <- filter(Down_HvS, `P_value_A_Healthy Control_vs_Severe` < 0.05)
hist(Down_HvS$`Fold_change_Healthy Control_vs_Severe`, breaks = 20)
Down_HvS <- filter(Down_HvS, `Fold_change_Healthy Control_vs_Severe` < -0.65)
#Down_HvS <- Down_HvS[order(Down_HvS$`Fold_change_Healthy Control_vs_Severe`), ]
example2_mapped <- string_db$map(Down_HvS, "Protein_Identifier", removeUnmappedRows = TRUE )
hits <- example2_mapped$STRING_id
string_db$plot_network(hits)
enrichment_down <- string_db$get_enrichment( hits )
head(enrichment_down, n=20)
annotations_down <- string_db$get_annotations( hits )
head(annotations_down, n=20)
clustersList_down <- string_db$get_clusters(example1_mapped$STRING_id)
install.packages("shiny")
library(shiny)
library(tidyverse)
library(STRINGdb)
proStat <- readRDS("/Users/lewi052/MAP/STRINGdb_exploration/proStat2.RDS")
ui <- fluidPage(selectInput(inputId = "regulation",
label = "Choose whether to include upregulated or downregulated proteins in the network",
choices = list("Upregulated", "Downregulated")),
selectInput(inputId = "Comparision",
label = "Choose COVID-19 patient status comparision",
choices = list("Healthy vs Severe", "Mild vs Healthy", "Mild vs Severe")),
plotOutput("network"))
server <- function(input, output) {
output$network <- renderPlot({
#changing names of columns based on slections
reg <- ifelse(input$regulation == "Upregulated", 1, -1)
if (input$Comparision == "Healthy vs Severe") {
colnames(proStat)[which(names(proStat) == "P_value_A_Healthy Control_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Healthy Control_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Healthy Control_vs_Severe")] <- "Flag"
} else if (input$Comparision == "Mild vs Healthy") {
colnames(proStat)[which(names(proStat) == "P_value_A_Mild_vs_Healthy Control")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Mild_vs_Healthy Control")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Mild_vs_Healthy Control")] <- "Flag"
} else {
colnames(proStat)[which(names(proStat) == "_value_A_Mild_vs_Severe")] <- "P_value"
colnames(proStat)[which(names(proStat) == "Fold_change_Mild_vs_Severe")] <- "Fold_change"
colnames(proStat)[which(names(proStat) == "Flag_A_Mild_vs_Severe")] <- "Flag"
}
hist(proStat$P_value)
})
}
shinyApp(ui = ui, server = server)
runApp('MAP/Practice_Shiny_app')
runApp('MAP/Practice_Shiny_app')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
shiny::runApp('MAP/Practice_Shiny_app')
runApp('MAP/Practice_Shiny_app')
runApp('MAP/Practice_Shiny_app')
shiny::runApp('MAP/Practice_Shiny_app')
